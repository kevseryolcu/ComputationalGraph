{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/dist/index.js","webpack:///./node_modules/code-block-writer/dist/code-block-writer.js","webpack:///./node_modules/code-block-writer/dist/utils/stringUtils.js","webpack:///./node_modules/code-block-writer/dist/CommentChar.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","stringUtils_1","CommentChar_1","CodeBlockWriter","opts","useTabs","numberSpaces","this","_currentIndentation","_text","_newLineOnNextWrite","_currentCommentChar","undefined","_stringCharStack","_isInRegEx","_isOnFirstLineOfBlock","_newLine","newLine","_useTabs","_indentNumberOfSpaces","indentNumberOfSpaces","_indentationText","Array","join","_quoteChar","useSingleQuote","getOptions","queueIndentationLevel","countOrText","_queuedIndentation","_getIndentationLevelFromArg","setIndentationLevel","getIndentationLevel","block","_newLineIfNewLineOnNextWrite","spaceIfLastNot","inlineBlock","write","_indentBlockInternal","newLineIfLastNot","indentBlock","isLastNewLine","getLastChar","Math","max","conditionalWriteLine","condition","strOrFunc","writeLine","getStringFromStrOrFunc","text","length","_writeIndentingNewLines","blankLineIfLastNot","isLastBlankLine","blankLine","conditionalBlankLine","indent","conditionalNewLine","_baseWriteNewline","quote","escapeForWithinString","isLastSpace","space","times","stringRepeat","tabIfLastNot","isLastTab","tab","conditionalWrite","textOrFunc","getLength","isInComment","isAtStartOfFirstLineOfBlock","isOnFirstLineOfBlock","isInString","indexOf","foundCount","currentChar","toString","_this","split","_newLineRegEx","forEach","writeIndividual","_writeIndentation","_updateInternalState","dequeueQueuedIndentation","CommentChar","Line","str","pastChar","pastPastChar","isRegExStart","Star","lastStringCharOnStack","pop","push","flooredIndentation","floor","overflow","portion","round","Error","_spacesOrTabsRegEx","test","_a","spacesCount","tabsCount","_i","str_1","char","getSpacesAndTabsCount","default","es5StringRepeat","newStr","String","repeat","newlineRegex","escapeChar","result","quoteKind","replace","Function"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import 'code-block-writer';","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar stringUtils_1 = require(\"./utils/stringUtils\");\r\nvar CommentChar_1 = require(\"./CommentChar\");\r\nvar CodeBlockWriter = /** @class */ (function () {\r\n    function CodeBlockWriter(opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        this._currentIndentation = 0;\r\n        this._text = \"\";\r\n        this._newLineOnNextWrite = false;\r\n        /** @internal */\r\n        this._currentCommentChar = undefined;\r\n        this._stringCharStack = [];\r\n        this._isInRegEx = false;\r\n        this._isOnFirstLineOfBlock = true;\r\n        this._newLine = opts.newLine || \"\\n\";\r\n        this._useTabs = opts.useTabs || false;\r\n        this._indentNumberOfSpaces = opts.indentNumberOfSpaces || 4;\r\n        this._indentationText = getIndentationText(this._useTabs, this._indentNumberOfSpaces);\r\n        this._quoteChar = opts.useSingleQuote ? \"'\" : \"\\\"\";\r\n    }\r\n    /**\r\n     * Gets the options.\r\n     */\r\n    CodeBlockWriter.prototype.getOptions = function () {\r\n        return {\r\n            indentNumberOfSpaces: this._indentNumberOfSpaces,\r\n            newLine: this._newLine,\r\n            useTabs: this._useTabs,\r\n            useSingleQuote: this._quoteChar === \"'\"\r\n        };\r\n    };\r\n    CodeBlockWriter.prototype.queueIndentationLevel = function (countOrText) {\r\n        this._queuedIndentation = this._getIndentationLevelFromArg(countOrText);\r\n        return this;\r\n    };\r\n    CodeBlockWriter.prototype.setIndentationLevel = function (countOrText) {\r\n        this._currentIndentation = this._getIndentationLevelFromArg(countOrText);\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets the current indentation level.\r\n     */\r\n    CodeBlockWriter.prototype.getIndentationLevel = function () {\r\n        return this._currentIndentation;\r\n    };\r\n    /**\r\n     * Writes a block using braces.\r\n     * @param block - Write using the writer within this block.\r\n     */\r\n    CodeBlockWriter.prototype.block = function (block) {\r\n        this._newLineIfNewLineOnNextWrite();\r\n        this.spaceIfLastNot();\r\n        this.inlineBlock(block);\r\n        this._newLineOnNextWrite = true;\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes an inline block with braces.\r\n     * @param block - Write using the writer within this block.\r\n     */\r\n    CodeBlockWriter.prototype.inlineBlock = function (block) {\r\n        this._newLineIfNewLineOnNextWrite();\r\n        this.write(\"{\");\r\n        this._indentBlockInternal(block);\r\n        this.newLineIfLastNot().write(\"}\");\r\n        return this;\r\n    };\r\n    /**\r\n     * Indents a block of code.\r\n     * @param block - Block to indent.\r\n     */\r\n    CodeBlockWriter.prototype.indentBlock = function (block) {\r\n        this._indentBlockInternal(block);\r\n        if (!this.isLastNewLine())\r\n            this._newLineOnNextWrite = true;\r\n        return this;\r\n    };\r\n    CodeBlockWriter.prototype._indentBlockInternal = function (block) {\r\n        this._currentIndentation++;\r\n        if (this.getLastChar() != null)\r\n            this.newLineIfLastNot();\r\n        this._isOnFirstLineOfBlock = true;\r\n        if (block != null)\r\n            block();\r\n        this._isOnFirstLineOfBlock = false;\r\n        this._currentIndentation = Math.max(0, this._currentIndentation - 1);\r\n    };\r\n    CodeBlockWriter.prototype.conditionalWriteLine = function (condition, strOrFunc) {\r\n        if (condition)\r\n            this.writeLine(stringUtils_1.getStringFromStrOrFunc(strOrFunc));\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a line of text.\r\n     * @param text - String to write.\r\n     */\r\n    CodeBlockWriter.prototype.writeLine = function (text) {\r\n        this._newLineIfNewLineOnNextWrite();\r\n        if (this._text.length > 0)\r\n            this.newLineIfLastNot();\r\n        this._writeIndentingNewLines(text);\r\n        this.newLine();\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a newline if the last line was not a newline.\r\n     */\r\n    CodeBlockWriter.prototype.newLineIfLastNot = function () {\r\n        this._newLineIfNewLineOnNextWrite();\r\n        if (!this.isLastNewLine())\r\n            this.newLine();\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a blank line if the last written text was not a blank line.\r\n     */\r\n    CodeBlockWriter.prototype.blankLineIfLastNot = function () {\r\n        if (!this.isLastBlankLine())\r\n            this.blankLine();\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a blank line if the condition is true.\r\n     * @param condition - Condition to evaluate.\r\n     */\r\n    CodeBlockWriter.prototype.conditionalBlankLine = function (condition) {\r\n        if (condition)\r\n            this.blankLine();\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a blank line.\r\n     */\r\n    CodeBlockWriter.prototype.blankLine = function () {\r\n        return this.newLineIfLastNot().newLine();\r\n    };\r\n    /**\r\n     * Indents the code one level for the current line.\r\n     */\r\n    CodeBlockWriter.prototype.indent = function () {\r\n        this._newLineIfNewLineOnNextWrite();\r\n        return this.write(this._indentationText);\r\n    };\r\n    /**\r\n     * Writes a newline if the condition is true.\r\n     * @param condition - Condition to evaluate.\r\n     */\r\n    CodeBlockWriter.prototype.conditionalNewLine = function (condition) {\r\n        if (condition)\r\n            this.newLine();\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a newline.\r\n     */\r\n    CodeBlockWriter.prototype.newLine = function () {\r\n        this._newLineOnNextWrite = false;\r\n        this._baseWriteNewline();\r\n        return this;\r\n    };\r\n    CodeBlockWriter.prototype.quote = function (text) {\r\n        this._newLineIfNewLineOnNextWrite();\r\n        this._writeIndentingNewLines(text == null ? this._quoteChar : this._quoteChar + stringUtils_1.escapeForWithinString(text, this._quoteChar) + this._quoteChar);\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a space if the last character was not a space.\r\n     */\r\n    CodeBlockWriter.prototype.spaceIfLastNot = function () {\r\n        this._newLineIfNewLineOnNextWrite();\r\n        if (!this.isLastSpace())\r\n            this._writeIndentingNewLines(\" \");\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a space.\r\n     * @param times - Number of times to write a space.\r\n     */\r\n    CodeBlockWriter.prototype.space = function (times) {\r\n        if (times === void 0) { times = 1; }\r\n        this._newLineIfNewLineOnNextWrite();\r\n        this._writeIndentingNewLines(stringUtils_1.stringRepeat(\" \", times));\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a tab if the last character was not a tab.\r\n     */\r\n    CodeBlockWriter.prototype.tabIfLastNot = function () {\r\n        this._newLineIfNewLineOnNextWrite();\r\n        if (!this.isLastTab())\r\n            this._writeIndentingNewLines(\"\\t\");\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes a tab.\r\n     * @param times - Number of times to write a tab.\r\n     */\r\n    CodeBlockWriter.prototype.tab = function (times) {\r\n        if (times === void 0) { times = 1; }\r\n        this._newLineIfNewLineOnNextWrite();\r\n        this._writeIndentingNewLines(stringUtils_1.stringRepeat(\"\\t\", times));\r\n        return this;\r\n    };\r\n    CodeBlockWriter.prototype.conditionalWrite = function (condition, textOrFunc) {\r\n        if (condition)\r\n            this.write(stringUtils_1.getStringFromStrOrFunc(textOrFunc));\r\n        return this;\r\n    };\r\n    /**\r\n     * Writes the provided text.\r\n     * @param text - Text to write.\r\n     */\r\n    CodeBlockWriter.prototype.write = function (text) {\r\n        this._newLineIfNewLineOnNextWrite();\r\n        this._writeIndentingNewLines(text);\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets the length of the string in the writer.\r\n     */\r\n    CodeBlockWriter.prototype.getLength = function () {\r\n        return this._text.length;\r\n    };\r\n    /**\r\n     * Gets if the writer is currently in a comment.\r\n     */\r\n    CodeBlockWriter.prototype.isInComment = function () {\r\n        return this._currentCommentChar !== undefined;\r\n    };\r\n    /**\r\n     * Gets if the writer is currently at the start of the first line of the text, block, or indentation block.\r\n     */\r\n    CodeBlockWriter.prototype.isAtStartOfFirstLineOfBlock = function () {\r\n        return this.isOnFirstLineOfBlock() && (this.isLastNewLine() || this.getLastChar() == null);\r\n    };\r\n    /**\r\n     * Gets if the writer is currently on the first line of the text, block, or indentation block.\r\n     */\r\n    CodeBlockWriter.prototype.isOnFirstLineOfBlock = function () {\r\n        return this._isOnFirstLineOfBlock;\r\n    };\r\n    /**\r\n     * Gets if the writer is currently in a string.\r\n     */\r\n    CodeBlockWriter.prototype.isInString = function () {\r\n        return this._stringCharStack.length > 0 && this._stringCharStack[this._stringCharStack.length - 1] !== \"{\";\r\n    };\r\n    /**\r\n     * Gets if the last chars written were for a newline.\r\n     */\r\n    CodeBlockWriter.prototype.isLastNewLine = function () {\r\n        return this._text.indexOf(this._newLine, this._text.length - this._newLine.length) !== -1 || this._text[this._text.length - 1] === \"\\n\";\r\n    };\r\n    /**\r\n     * Gets if the last chars written were for a blank line.\r\n     */\r\n    CodeBlockWriter.prototype.isLastBlankLine = function () {\r\n        var foundCount = 0;\r\n        for (var i = this._text.length - 1; i >= 0; i--) {\r\n            var currentChar = this._text[i];\r\n            if (currentChar === \"\\n\") {\r\n                foundCount++;\r\n                if (foundCount === 2)\r\n                    return true;\r\n            }\r\n            else if (currentChar !== \"\\r\")\r\n                return false;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Gets if the last char written was a space.\r\n     */\r\n    CodeBlockWriter.prototype.isLastSpace = function () {\r\n        return this.getLastChar() === \" \";\r\n    };\r\n    /**\r\n     * Gets if the last char written was a tab.\r\n     */\r\n    CodeBlockWriter.prototype.isLastTab = function () {\r\n        return this.getLastChar() === \"\\t\";\r\n    };\r\n    /**\r\n     * Gets the last char written.\r\n     */\r\n    CodeBlockWriter.prototype.getLastChar = function () {\r\n        if (this._text.length === 0)\r\n            return undefined;\r\n        return this._text[this._text.length - 1];\r\n    };\r\n    /**\r\n     * Gets the writer's text.\r\n     */\r\n    CodeBlockWriter.prototype.toString = function () {\r\n        return this._text;\r\n    };\r\n    CodeBlockWriter.prototype._writeIndentingNewLines = function (text) {\r\n        var _this = this;\r\n        text = text || \"\";\r\n        if (text.length === 0) {\r\n            writeIndividual.call(this, \"\");\r\n            return;\r\n        }\r\n        var items = text.split(CodeBlockWriter._newLineRegEx);\r\n        items.forEach(function (s, i) {\r\n            if (i > 0)\r\n                _this._baseWriteNewline();\r\n            if (s.length === 0)\r\n                return;\r\n            writeIndividual.call(_this, s);\r\n        });\r\n        function writeIndividual(s) {\r\n            if (!this.isInString()) {\r\n                var isAtStartOfLine = this.isLastNewLine() || this._text.length === 0;\r\n                if (isAtStartOfLine)\r\n                    this._writeIndentation();\r\n            }\r\n            this._updateInternalState(s);\r\n            this._text += s;\r\n            this.dequeueQueuedIndentation();\r\n        }\r\n    };\r\n    CodeBlockWriter.prototype._baseWriteNewline = function () {\r\n        if (this._currentCommentChar === CommentChar_1.CommentChar.Line)\r\n            this._currentCommentChar = undefined;\r\n        this._text += this._newLine;\r\n        this._isOnFirstLineOfBlock = false;\r\n        this.dequeueQueuedIndentation();\r\n    };\r\n    CodeBlockWriter.prototype.dequeueQueuedIndentation = function () {\r\n        if (this._queuedIndentation == null)\r\n            return;\r\n        this._currentIndentation = this._queuedIndentation;\r\n        this._queuedIndentation = undefined;\r\n    };\r\n    CodeBlockWriter.prototype._updateInternalState = function (str) {\r\n        for (var i = 0; i < str.length; i++) {\r\n            var currentChar = str[i];\r\n            var pastChar = i === 0 ? this._text[this._text.length - 1] : str[i - 1];\r\n            var pastPastChar = i === 0 ? this._text[this._text.length - 2] : str[i - 2];\r\n            // handle regex\r\n            if (this._isInRegEx) {\r\n                if (pastChar === \"/\" && pastPastChar !== \"\\\\\" || pastChar === \"\\n\")\r\n                    this._isInRegEx = false;\r\n                else\r\n                    continue;\r\n            }\r\n            else if (!this.isInString() && !this.isInComment() && isRegExStart(currentChar, pastChar, pastPastChar)) {\r\n                this._isInRegEx = true;\r\n                continue;\r\n            }\r\n            // handle comments\r\n            if (this._currentCommentChar == null && pastChar === \"/\" && currentChar === \"/\")\r\n                this._currentCommentChar = CommentChar_1.CommentChar.Line;\r\n            else if (this._currentCommentChar == null && pastChar === \"/\" && currentChar === \"*\")\r\n                this._currentCommentChar = CommentChar_1.CommentChar.Star;\r\n            else if (this._currentCommentChar === CommentChar_1.CommentChar.Star && pastChar === \"*\" && currentChar === \"/\")\r\n                this._currentCommentChar = undefined;\r\n            if (this.isInComment())\r\n                continue;\r\n            // handle strings\r\n            var lastStringCharOnStack = this._stringCharStack.length === 0 ? undefined : this._stringCharStack[this._stringCharStack.length - 1];\r\n            if (currentChar === \"\\\"\" || currentChar === \"'\" || currentChar === \"`\") {\r\n                if (lastStringCharOnStack === currentChar)\r\n                    this._stringCharStack.pop();\r\n                else if (lastStringCharOnStack === \"{\" || lastStringCharOnStack === undefined)\r\n                    this._stringCharStack.push(currentChar);\r\n            }\r\n            else if (pastChar === \"$\" && currentChar === \"{\" && lastStringCharOnStack === \"`\")\r\n                this._stringCharStack.push(currentChar);\r\n            else if (currentChar === \"}\" && lastStringCharOnStack === \"{\")\r\n                this._stringCharStack.pop();\r\n        }\r\n        function isRegExStart(currentChar, pastChar, pastPastChar) {\r\n            return pastChar === \"/\"\r\n                && currentChar !== \"/\"\r\n                && currentChar !== \"*\"\r\n                && pastPastChar !== \"*\"\r\n                && pastPastChar !== \"/\";\r\n        }\r\n    };\r\n    CodeBlockWriter.prototype._writeIndentation = function () {\r\n        var flooredIndentation = Math.floor(this._currentIndentation);\r\n        for (var i = 0; i < flooredIndentation; i++)\r\n            this._text += this._indentationText;\r\n        var overflow = this._currentIndentation - flooredIndentation;\r\n        if (this._useTabs) {\r\n            if (overflow > 0.5)\r\n                this._text += this._indentationText;\r\n        }\r\n        else {\r\n            var portion = Math.round(this._indentationText.length * overflow);\r\n            for (var i = 0; i < portion; i++)\r\n                this._text += this._indentationText[i];\r\n        }\r\n    };\r\n    CodeBlockWriter.prototype._newLineIfNewLineOnNextWrite = function () {\r\n        if (!this._newLineOnNextWrite)\r\n            return;\r\n        this._newLineOnNextWrite = false;\r\n        this.newLine();\r\n    };\r\n    CodeBlockWriter.prototype._getIndentationLevelFromArg = function (countOrText) {\r\n        if (typeof countOrText === \"number\") {\r\n            if (countOrText < 0)\r\n                throw new Error(\"Passed in indentation level should be greater than or equal to 0.\");\r\n            return countOrText;\r\n        }\r\n        else if (typeof countOrText === \"string\") {\r\n            if (!CodeBlockWriter._spacesOrTabsRegEx.test(countOrText))\r\n                throw new Error(\"Provided string must be empty or only contain spaces or tabs.\");\r\n            var _a = getSpacesAndTabsCount(countOrText), spacesCount = _a.spacesCount, tabsCount = _a.tabsCount;\r\n            return tabsCount + spacesCount / this._indentNumberOfSpaces;\r\n        }\r\n        else\r\n            throw new Error(\"Argument provided must be a string or number.\");\r\n    };\r\n    CodeBlockWriter._newLineRegEx = /\\r?\\n/;\r\n    CodeBlockWriter._spacesOrTabsRegEx = /^[ \\t]*$/;\r\n    return CodeBlockWriter;\r\n}());\r\nexports.default = CodeBlockWriter;\r\nfunction getIndentationText(useTabs, numberSpaces) {\r\n    if (useTabs)\r\n        return \"\\t\";\r\n    return Array(numberSpaces + 1).join(\" \");\r\n}\r\nfunction getSpacesAndTabsCount(str) {\r\n    var spacesCount = 0;\r\n    var tabsCount = 0;\r\n    for (var _i = 0, str_1 = str; _i < str_1.length; _i++) {\r\n        var char = str_1[_i];\r\n        if (char === \"\\t\")\r\n            tabsCount++;\r\n        else if (char === \" \")\r\n            spacesCount++;\r\n    }\r\n    return { spacesCount: spacesCount, tabsCount: tabsCount };\r\n}\r\n//# sourceMappingURL=code-block-writer.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/** @internal */\r\nfunction stringRepeat(str, times) {\r\n    /* istanbul ignore else */\r\n    if (typeof String.prototype.repeat === \"function\")\r\n        return str.repeat(times);\r\n    else\r\n        return es5StringRepeat(str, times);\r\n}\r\nexports.stringRepeat = stringRepeat;\r\n/** @internal */\r\nfunction es5StringRepeat(str, times) {\r\n    if (times < 0)\r\n        throw new Error(\"Invalid times value.\");\r\n    var newStr = \"\";\r\n    for (var i = 0; i < times; i++)\r\n        newStr += str;\r\n    return newStr;\r\n}\r\nexports.es5StringRepeat = es5StringRepeat;\r\nvar newlineRegex = /(\\r?\\n)/g;\r\n/** @internal */\r\nfunction escapeForWithinString(str, quoteKind) {\r\n    return escapeChar(str, quoteKind).replace(newlineRegex, \"\\\\$1\");\r\n}\r\nexports.escapeForWithinString = escapeForWithinString;\r\n/** @internal */\r\nfunction escapeChar(str, char) {\r\n    if (char.length !== 1)\r\n        throw new Error(\"Specified char must be one character long.\");\r\n    var result = \"\";\r\n    for (var i = 0; i < str.length; i++) {\r\n        if (str[i] === char)\r\n            result += \"\\\\\";\r\n        result += str[i];\r\n    }\r\n    return result;\r\n}\r\nexports.escapeChar = escapeChar;\r\n/** @internal */\r\nfunction getStringFromStrOrFunc(strOrFunc) {\r\n    return strOrFunc instanceof Function ? strOrFunc() : strOrFunc;\r\n}\r\nexports.getStringFromStrOrFunc = getStringFromStrOrFunc;\r\n//# sourceMappingURL=stringUtils.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/** @internal */\r\nvar CommentChar;\r\n(function (CommentChar) {\r\n    CommentChar[CommentChar[\"Line\"] = 0] = \"Line\";\r\n    CommentChar[CommentChar[\"Star\"] = 1] = \"Star\";\r\n})(CommentChar = exports.CommentChar || (exports.CommentChar = {}));\r\n//# sourceMappingURL=CommentChar.js.map"],"sourceRoot":""}